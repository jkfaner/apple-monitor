package com.github.jkfaner.ui.form;

import com.github.jkfaner.common.IBaseObject;
import com.github.jkfaner.mapper.ModelMapper;
import com.github.jkfaner.mapper.bean.Model;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import lombok.Getter;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.Map;

/**
 * @author: LiamLee
 * @since: 2022-10-02
 **/
@Getter
public class ModelForm implements IBaseObject<ModelForm> {

    private static ModelForm modelForm;

    private JPanel mainJPanel;
    private JScrollPane modelJScroll;

    @Override
    public ModelForm getInstance() {
        modelForm = modelForm == null ? new ModelForm() : modelForm;
        return modelForm;
    }

    public static void init() {
        modelForm = new ModelForm().getInstance();
        initUI();
    }

    private static void initUI() {
        modelForm = new ModelForm().getInstance();
        JScrollPane modelJScroll = modelForm.getModelJScroll();
        JPanel modelJPanel = new JPanel();

        ModelMapper instance = new ModelMapper().getInstance();
        ArrayList<Model> modelList = instance.getCheckModelList();
        Map<String, String> modelMap = instance.getCheckModelMap();
        // 获取型号数量
        int modelNum = modelMap.size();

        // rowCount---容器可容纳行数  columnCount---容器每行容纳数量
        modelJPanel.setLayout(new GridLayoutManager(modelNum, 1, new Insets(0, 0, 0, 0), -1, -1));
        modelJScroll.setViewportView(modelJPanel);

        // 普通容器样式：一行一列
        GridLayoutManager gridLayoutManager = new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1);
        // 复选框放入普通容器样式：首行首列
        GridConstraints gridConstraints = new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false);

        // 将复选框放入滚动条容器中的普通容器中
        for (int i = 0; i < modelNum; i++) {
            JPanel jPanel = new JPanel();
            jPanel.setLayout(gridLayoutManager);
            // Top样式
            modelJPanel.add(jPanel, new GridConstraints(i, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
            JCheckBox jCheckBox = new JCheckBox();
            jCheckBox.setText(modelList.get(i).getName());
            jPanel.add(jCheckBox, gridConstraints);
        }
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainJPanel = new JPanel();
        mainJPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        modelJScroll = new JScrollPane();
        modelJScroll.setEnabled(true);
        mainJPanel.add(modelJScroll, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainJPanel;
    }

}
